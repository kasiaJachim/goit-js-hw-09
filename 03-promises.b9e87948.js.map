{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,cAAc,IAGhB,IAAMC,EAAaC,SAASC,cAAc,yBACpCC,EAAYF,SAASC,cAAc,wBACnCE,EAAaH,SAASC,cAAc,0BAK1C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAbMN,SAASC,cAAc,SAE/Ba,iBAAiB,UActB,SAAsBC,GACpBA,EAAEC,gBAOF,IANA,IAAMC,EAAaC,OAAOnB,EAAWoB,OAC/BC,EAASF,OAAOhB,EAAUiB,OAC1BE,EAAWH,OAAOf,EAAWgB,OAE/BG,EAAUL,EAELM,EAAI,EAAGA,GAAKF,EAAUE,GAAK,EAClCnB,EAAcmB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBX,EAAAF,GAASG,OAAO8B,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEjDsB,OAAM,SAAAH,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBX,EAAAF,GAASG,OAAOiC,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEjDgB,EAAUL,EAAaM,EAAIH,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  pauseOnHover: false,\n});\n\nconst inputDeyal = document.querySelector('input[name = \"delay\"]');\nconst inputStep = document.querySelector('input[name = \"step\"]');\nconst inputAmout = document.querySelector('input[name = \"amount\"]');\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }else{\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\nfunction handleSubmit(e) {\n  e.preventDefalt();\n  const firstDelay = Number(inputDeyal.value);\n  const stepEl = Number(inputStep.value);\n  const amountEl = Number(inputAmout.value);\n\n  let delayEl = firstDelay;\n\n  for (let i = 1; i <= amountEl; i += 1) {\n    createPromise(i, delayEl)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,);\n      });\n    delayEl = firstDelay + i * stepEl;\n  }\n}\n"],"names":["$6JpON","parcelRequire","$parcel$interopDefault","Notify","init","pauseOnHover","$ce04d3a99e08e73b$var$inputDeyal","document","querySelector","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmout","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefalt","firstDelay","Number","value","stepEl","amountEl","delayEl","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.b9e87948.js.map"}